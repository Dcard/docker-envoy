diff --git a/CMakeLists.txt b/CMakeLists.txt
index b12b64f..9b4c91f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,8 +15,8 @@ include(HunterGate)
 option(HUNTER_BUILD_SHARED_LIBS "Build Shared Library" ON)
 
 HunterGate(
-    URL "https://github.com/cpp-pm/hunter/archive/v0.23.249.tar.gz"
-    SHA1 "d45d77d8bba9da13e9290a180e0477e90accd89b"
+    URL "https://github.com/cpp-pm/hunter/archive/v0.23.317.tar.gz"
+    SHA1 "fbdd94b1966d351384e27b02c8d134915b1131d6"
     LOCAL # load `${CMAKE_CURRENT_LIST_DIR}/cmake/Hunter/config.cmake`
 )
 
@@ -102,7 +102,7 @@ if(JAEGERTRACING_WITH_YAML_CPP)
   # yaml-cpp-config.cmake file
   find_package(yaml-cpp CONFIG REQUIRED)
   if(HUNTER_ENABLED)
-      list(APPEND LIBS yaml-cpp::yaml-cpp)
+      list(APPEND LIBS yaml-cpp)
   else()
       list(APPEND LIBS yaml-cpp)
   endif()
@@ -240,7 +240,7 @@ function(update_path_for_test atest)
     # If dependent library is a DLL we have to add location of DLL to PATH
     set(new_path "")
 
-    foreach(LIB OpenTracing::opentracing yaml-cpp::yaml-cpp GTest::main)
+    foreach(LIB OpenTracing::opentracing yaml-cpp GTest::main)
       list(APPEND new_path $<TARGET_FILE_DIR:${LIB}>)
     endforeach()
     list(APPEND new_path $ENV{PATH})
@@ -276,7 +276,6 @@ if(JAEGERTRACING_PLUGIN)
   add_lib_deps(jaegertracing_plugin)
   target_link_libraries(jaegertracing_plugin PUBLIC
     -static-libgcc
-    -static-libstdc++
     -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/export.map)
 endif()
 
diff --git a/cmake/Hunter/config.cmake b/cmake/Hunter/config.cmake
index f26c853..c03c726 100644
--- a/cmake/Hunter/config.cmake
+++ b/cmake/Hunter/config.cmake
@@ -1 +1,3 @@
 hunter_config(GTest VERSION 1.8.0-hunter-p11)
+hunter_config(Boost VERSION 1.72.0-p1)
+hunter_config(opentracing-cpp VERSION 1.5.0)
diff --git a/cmake/toolchain.cmake b/cmake/toolchain.cmake
index ad7a02f..b600fac 100644
--- a/cmake/toolchain.cmake
+++ b/cmake/toolchain.cmake
@@ -1,5 +1,5 @@
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
diff --git a/src/jaegertracing/Span.h b/src/jaegertracing/Span.h
index 1e5c7b6..59b4e51 100644
--- a/src/jaegertracing/Span.h
+++ b/src/jaegertracing/Span.h
@@ -190,22 +190,6 @@ class Span : public opentracing::Span {
                                                      : itr->second;
     }
 
-    void Log(opentracing::SystemTime timestamp,
-             std::initializer_list<
-                 std::pair<opentracing::string_view, opentracing::Value>>
-                 fieldPairs) noexcept override
-    {
-        doLog(timestamp, fieldPairs);
-    }
-
-    void Log(opentracing::SystemTime timestamp,
-             const std::vector<
-                 std::pair<opentracing::string_view, opentracing::Value>>&
-                 fieldPairs) noexcept override
-    {
-        doLog(timestamp, fieldPairs);
-    }
-
     void Log(std::initializer_list<
              std::pair<opentracing::string_view, opentracing::Value>>
                  fieldPairs) noexcept override
diff --git a/src/jaegertracing/SpanContext.h b/src/jaegertracing/SpanContext.h
index 84a197e..21c56c0 100644
--- a/src/jaegertracing/SpanContext.h
+++ b/src/jaegertracing/SpanContext.h
@@ -179,7 +179,7 @@ class SpanContext : public opentracing::SpanContext {
         forEachBaggageItem(f);
     }
 
-    std::unique_ptr<opentracing::SpanContext> Clone() const noexcept override
+    std::unique_ptr<opentracing::SpanContext> Clone() const noexcept
     {
         std::lock_guard<std::mutex> lock(_mutex);
         return std::unique_ptr<opentracing::SpanContext>(
